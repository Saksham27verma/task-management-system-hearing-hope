#!/usr/bin/env node

// prepare-production.js
// This script prepares the system for production by:
// 1. Removing all sample/test data
// 2. Ensuring a production admin user exists
// 3. Verifying system configuration

require('dotenv').config({ path: '.env.local' });
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const { exec } = require('child_process');

console.log('üöÄ Starting production preparation script...');
console.log('MongoDB URI:', process.env.MONGODB_URI ? 'Found' : 'Not found');

// Connect to MongoDB
const connectToDatabase = async () => {
  console.log('Attempting to connect to MongoDB...');
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connected to MongoDB');
    return true;
  } catch (error) {
    console.error('‚ùå MongoDB connection error:', error);
    return false;
  }
};

// Define schemas for working with data
const defineSchemas = () => {
  const userSchema = new mongoose.Schema({
    name: String,
    email: String,
    password: String,
    role: String,
    phone: String,
    position: String,
    isActive: Boolean,
    lastLogin: Date,
    customPermissions: Array,
    createdAt: Date,
    updatedAt: Date
  });

  const taskSchema = new mongoose.Schema({
    title: String,
    description: String,
    assignedTo: Array,
    assignedBy: mongoose.Schema.Types.ObjectId,
    taskType: String,
    priority: String,
    status: String,
    startDate: Date,
    dueDate: Date,
    dateRange: Object,
    remarks: String,
    progressUpdates: Array,
    completedDate: Date,
    createdAt: Date,
    updatedAt: Date
  });

  const companySchema = new mongoose.Schema({
    name: String,
    description: String,
    address: String,
    email: String,
    phone: String,
    website: String,
    logoUrl: String,
    socialLinks: Array
  });

  // Create or get models
  const User = mongoose.models.User || mongoose.model('User', userSchema);
  const Task = mongoose.models.Task || mongoose.model('Task', taskSchema);
  const Company = mongoose.models.Company || mongoose.model('Company', companySchema);

  return { User, Task, Company };
};

// Clean mock data from the database
const cleanMockData = async (models) => {
  const { User, Task, Company } = models;
  
  console.log('Cleaning mock data from the system...');
  
  // Delete sample users
  const mockEmails = [
    'admin@example.com',
    'manager@example.com',
    'employee1@example.com',
    'employee2@example.com',
    'employee3@example.com'
  ];
  
  const userDeleteResult = await User.deleteMany({ 
    email: { $in: mockEmails }
  });
  
  console.log(`‚úÖ Removed ${userDeleteResult.deletedCount} sample user accounts`);
  
  // Delete sample tasks with random titles (generated by seedData.js)
  const taskDeleteResult = await Task.deleteMany({
    title: { $regex: /^Task \d+$/ } // Delete tasks with titles like "Task 123"
  });
  
  console.log(`‚úÖ Removed ${taskDeleteResult.deletedCount} sample tasks`);
  
  return { userDeleteResult, taskDeleteResult };
};

// Create production admin and company if they don't exist
const createProductionData = async (models) => {
  const { User, Company } = models;
  
  // Check if production admin exists
  const existingAdmin = await User.findOne({ email: 'admin@hearinghope.org' });
  
  if (!existingAdmin) {
    console.log('Creating production admin user...');
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash('admin123', salt); // You should change this password after first login
    
    const newAdmin = new User({
      name: 'Hearing Hope Admin',
      email: 'admin@hearinghope.org',
      password: hashedPassword,
      role: 'SUPER_ADMIN',
      phone: '1234567890',
      position: 'Administrator',
      isActive: true,
      createdAt: new Date(),
      updatedAt: new Date(),
      customPermissions: []
    });
    
    await newAdmin.save();
    console.log('‚úÖ Production admin created successfully');
  } else {
    console.log('‚úÖ Production admin already exists');
  }
  
  // Check if company information exists
  const existingCompany = await Company.findOne();
  
  if (!existingCompany) {
    console.log('Creating company information...');
    const company = new Company({
      name: 'Hearing Hope',
      description: 'Providing hearing solutions and support to communities in need.',
      address: '123 Main Street, Suite 100, Anytown, CA 12345',
      email: 'info@hearinghope.org',
      phone: '(555) 123-4567',
      website: 'https://hearinghope.org',
      socialLinks: [
        { platform: 'Facebook', url: 'https://facebook.com/hearinghope' },
        { platform: 'Twitter', url: 'https://twitter.com/hearinghope' },
        { platform: 'Instagram', url: 'https://instagram.com/hearinghope' }
      ]
    });
    
    await company.save();
    console.log('‚úÖ Company information created successfully');
  } else {
    console.log('‚úÖ Company information already exists');
  }
};

// Run the production preparation process
const prepareForProduction = async () => {
  console.log('Beginning production preparation process...');
  const connected = await connectToDatabase();
  
  if (connected) {
    try {
      // Define models
      const models = defineSchemas();
      
      // Clean mock data
      await cleanMockData(models);
      
      // Create production data
      await createProductionData(models);
      
      console.log('‚úÖ Production preparation completed successfully');
    } catch (error) {
      console.error('‚ùå Error during production preparation:', error);
    } finally {
      // Close database connection
      console.log('Closing database connection...');
      mongoose.connection.close();
    }
  } else {
    console.error('‚ùå Could not connect to database, preparation process failed');
  }
};

// Run the script
prepareForProduction(); 